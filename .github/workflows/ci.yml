name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
        coverage: none
    
    - name: Validate PHP syntax
      run: php -l dungeon_crawler.php
    
    - name: Run unit tests
      run: php run_tests.php
    
    - name: Test game functionality
      run: |
        # Test that the game can be loaded without errors
        php -r "
        \$gameCode = file_get_contents('dungeon_crawler.php');
        \$gameCode = preg_replace('/\/\/ Start the game if running from CLI.*$/s', '', \$gameCode);
        eval('?>' . \$gameCode);
        \$game = initializeGame();
        echo 'Game loaded successfully with ' . count(\$game['rooms']) . ' rooms' . PHP_EOL;
        "
    
    - name: Check code quality
      run: |
        # Basic code quality checks
        echo "Checking for TODO comments..."
        if grep -r "TODO\|FIXME\|XXX" . --exclude-dir=.git; then
          echo "Found TODO/FIXME comments - consider addressing them"
        else
          echo "No TODO/FIXME comments found"
        fi
        
        echo "Checking file permissions..."
        ls -la *.php
    
    - name: Test game requirements
      run: |
        # Verify all requirements are met
        php -r "
        \$gameCode = file_get_contents('dungeon_crawler.php');
        \$gameCode = preg_replace('/\/\/ Start the game if running from CLI.*$/s', '', \$gameCode);
        eval('?>' . \$gameCode);
        
        \$game = initializeGame();
        \$rooms = \$game['rooms'];
        
        // Check requirements
        \$checks = [
          'Turn-based gameplay' => true, // Implicit in design
          'Connected rooms' => count(\$rooms) > 1,
          'Player starts in given room' => \$game['player']['current_room'] === 'start',
          'Movement commands' => isset(\$rooms['start']['connections']),
          'Monsters in rooms' => array_filter(\$rooms, fn(\$r) => \$r['monster'] !== null),
          'Treasure collection' => array_filter(\$rooms, fn(\$r) => \$r['treasure'] > 0),
          'Exit room' => array_filter(\$rooms, fn(\$r) => \$r['is_exit']),
          'PHP implementation' => true,
          'State maintenance' => true
        ];
        
        foreach (\$checks as \$requirement => \$passed) {
          echo (\$passed ? '✓' : '✗') . ' ' . \$requirement . PHP_EOL;
        }
        "
  
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
    
    - name: Security scan
      run: |
        # Basic security checks
        echo "Checking for potential security issues..."
        
        # Check for dangerous functions
        if grep -r "eval\|exec\|system\|shell_exec\|passthru" . --include="*.php" --exclude-dir=.git; then
          echo "Warning: Found potentially dangerous functions"
        else
          echo "✓ No dangerous functions found"
        fi
        
        # Check for hardcoded secrets (basic check)
        if grep -r "password\|secret\|key\|token" . --include="*.php" --exclude-dir=.git | grep -v "treasure\|gold"; then
          echo "Warning: Found potential hardcoded secrets"
        else
          echo "✓ No obvious hardcoded secrets found"
        fi

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        echo "Checking project documentation..."
        
        # Check if README exists and has content
        if [ -f "README.md" ]; then
          echo "✓ README.md exists"
          if [ -s "README.md" ]; then
            echo "✓ README.md has content"
          else
            echo "✗ README.md is empty"
            exit 1
          fi
        else
          echo "✗ README.md missing"
          exit 1
        fi
        
        # Check for required sections in README
        required_sections=("Installation" "How to Run" "How to Play")
        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "✓ README contains '$section' section"
          else
            echo "✗ README missing '$section' section"
            exit 1
          fi
        done
        
        echo "✓ Documentation check passed"
